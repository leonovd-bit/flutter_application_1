extend type DeliveryAddress {
  """
  ✨ List `UserSubscription` objects in a one-to-many relationship (where `UserSubscription`.`shippingAddress` is this object).
  """
  userSubscriptions_on_shippingAddress(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSubscription_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSubscription_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserSubscription_Having
  ): [UserSubscription!]! @fdc_generated(from: "UserSubscription.shippingAddress", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "DeliveryAddress", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table.
  """
  _count: Int! @fdc_generated(from: "DeliveryAddress", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `aptSuite` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  aptSuite_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.aptSuite", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `city` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  city_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.city", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `isDefault` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isDefault_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.isDefault", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `state` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  state_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.state", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `street` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  street_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.street", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.userId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DeliveryAddress` table where the `zipCode` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  zipCode_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress.zipCode", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `DeliveryAddress` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "DeliveryAddress.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `DeliveryAddress` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "DeliveryAddress.createdAt", purpose: QUERY_MAX)
}
extend type DietaryTag {
  """
  ✨ List `MealDietaryTag` objects in a one-to-many relationship (where `MealDietaryTag`.`dietaryTag` is this object).
  """
  mealDietaryTags_on_dietaryTag(
    """
    Filter condition to narrow down the query results.
    """
    where: MealDietaryTag_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MealDietaryTag_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MealDietaryTag_Having
  ): [MealDietaryTag!]! @fdc_generated(from: "MealDietaryTag.dietaryTag", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Meal` objects using `MealDietaryTag` as the join table (a `MealDietaryTag` object exists where its `dietaryTag` is this and its `meal` is that).
  """
  meals_via_MealDietaryTag(
    """
    Filter condition to narrow down the query results.
    """
    where: MealDietaryTag_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MealDietaryTag_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MealDietaryTag_Having
  ): [Meal!]! @fdc_generated(from: "MealDietaryTag", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "DietaryTag", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `DietaryTag` table.
  """
  _count: Int! @fdc_generated(from: "DietaryTag", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DietaryTag` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DietaryTag.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DietaryTag` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DietaryTag.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DietaryTag` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DietaryTag.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `DietaryTag` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "DietaryTag.name", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `DietaryTag` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "DietaryTag.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `DietaryTag` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "DietaryTag.createdAt", purpose: QUERY_MAX)
}
extend type Meal {
  """
  ✨ List `MealDietaryTag` objects in a one-to-many relationship (where `MealDietaryTag`.`meal` is this object).
  """
  mealDietaryTags_on_meal(
    """
    Filter condition to narrow down the query results.
    """
    where: MealDietaryTag_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MealDietaryTag_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MealDietaryTag_Having
  ): [MealDietaryTag!]! @fdc_generated(from: "MealDietaryTag.meal", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `SubscriptionMeal` objects in a one-to-many relationship (where `SubscriptionMeal`.`meal` is this object).
  """
  subscriptionMeals_on_meal(
    """
    Filter condition to narrow down the query results.
    """
    where: SubscriptionMeal_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SubscriptionMeal_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SubscriptionMeal_Having
  ): [SubscriptionMeal!]! @fdc_generated(from: "SubscriptionMeal.meal", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `DietaryTag` objects using `MealDietaryTag` as the join table (a `MealDietaryTag` object exists where its `meal` is this and its `dietaryTag` is that).
  """
  dietaryTags_via_MealDietaryTag(
    """
    Filter condition to narrow down the query results.
    """
    where: MealDietaryTag_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MealDietaryTag_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MealDietaryTag_Having
  ): [DietaryTag!]! @fdc_generated(from: "MealDietaryTag", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Meal", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Meal` table.
  """
  _count: Int! @fdc_generated(from: "Meal", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `calories` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  calories_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.calories", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `carbs` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  carbs_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.carbs", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `cuisineType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  cuisineType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.cuisineType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `fat` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  fat_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.fat", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `imageURL` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageURL_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.imageURL", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `ingredients` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  ingredients_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.ingredients", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `prepTimeMinutes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  prepTimeMinutes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.prepTimeMinutes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Meal` table where the `protein` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  protein_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Meal.protein", purpose: QUERY_COUNT)
  """
  ✨ Sum the `calories` field in the `Meal` table.
  """
  calories_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Meal.calories", purpose: QUERY_SUM)
  """
  ✨ Sum the `carbs` field in the `Meal` table.
  """
  carbs_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.carbs", purpose: QUERY_SUM)
  """
  ✨ Sum the `fat` field in the `Meal` table.
  """
  fat_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.fat", purpose: QUERY_SUM)
  """
  ✨ Sum the `prepTimeMinutes` field in the `Meal` table.
  """
  prepTimeMinutes_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Meal.prepTimeMinutes", purpose: QUERY_SUM)
  """
  ✨ Sum the `protein` field in the `Meal` table.
  """
  protein_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.protein", purpose: QUERY_SUM)
  """
  ✨ Average the `calories` field in the `Meal` table.
  """
  calories_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.calories", purpose: QUERY_AVG)
  """
  ✨ Average the `carbs` field in the `Meal` table.
  """
  carbs_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.carbs", purpose: QUERY_AVG)
  """
  ✨ Average the `fat` field in the `Meal` table.
  """
  fat_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.fat", purpose: QUERY_AVG)
  """
  ✨ Average the `prepTimeMinutes` field in the `Meal` table.
  """
  prepTimeMinutes_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.prepTimeMinutes", purpose: QUERY_AVG)
  """
  ✨ Average the `protein` field in the `Meal` table.
  """
  protein_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Meal.protein", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `calories` field in the `Meal` table.
  """
  calories_min: Int @fdc_generated(from: "Meal.calories", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `carbs` field in the `Meal` table.
  """
  carbs_min: Float @fdc_generated(from: "Meal.carbs", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Meal` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Meal.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `fat` field in the `Meal` table.
  """
  fat_min: Float @fdc_generated(from: "Meal.fat", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `prepTimeMinutes` field in the `Meal` table.
  """
  prepTimeMinutes_min: Int @fdc_generated(from: "Meal.prepTimeMinutes", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `protein` field in the `Meal` table.
  """
  protein_min: Float @fdc_generated(from: "Meal.protein", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `calories` field in the `Meal` table.
  """
  calories_max: Int @fdc_generated(from: "Meal.calories", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `carbs` field in the `Meal` table.
  """
  carbs_max: Float @fdc_generated(from: "Meal.carbs", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Meal` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Meal.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `fat` field in the `Meal` table.
  """
  fat_max: Float @fdc_generated(from: "Meal.fat", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `prepTimeMinutes` field in the `Meal` table.
  """
  prepTimeMinutes_max: Int @fdc_generated(from: "Meal.prepTimeMinutes", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `protein` field in the `Meal` table.
  """
  protein_max: Float @fdc_generated(from: "Meal.protein", purpose: QUERY_MAX)
}
extend type MealDietaryTag {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "MealDietaryTag", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `MealDietaryTag` table.
  """
  _count: Int! @fdc_generated(from: "MealDietaryTag", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MealDietaryTag` table where the `dietaryTagId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  dietaryTagId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MealDietaryTag.dietaryTagId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MealDietaryTag` table where the `mealId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  mealId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MealDietaryTag.mealId", purpose: QUERY_COUNT)
}
extend type SubscriptionMeal {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "SubscriptionMeal", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table.
  """
  _count: Int! @fdc_generated(from: "SubscriptionMeal", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `deliveryDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  deliveryDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.deliveryDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `mealId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  mealId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.mealId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `notes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  notes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.notes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `quantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  quantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.quantity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionMeal` table where the `userSubscriptionId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userSubscriptionId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal.userSubscriptionId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `quantity` field in the `SubscriptionMeal` table.
  """
  quantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "SubscriptionMeal.quantity", purpose: QUERY_SUM)
  """
  ✨ Average the `quantity` field in the `SubscriptionMeal` table.
  """
  quantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SubscriptionMeal.quantity", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `SubscriptionMeal` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "SubscriptionMeal.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `deliveryDate` field in the `SubscriptionMeal` table.
  """
  deliveryDate_min: Date @fdc_generated(from: "SubscriptionMeal.deliveryDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `quantity` field in the `SubscriptionMeal` table.
  """
  quantity_min: Int @fdc_generated(from: "SubscriptionMeal.quantity", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `SubscriptionMeal` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "SubscriptionMeal.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `deliveryDate` field in the `SubscriptionMeal` table.
  """
  deliveryDate_max: Date @fdc_generated(from: "SubscriptionMeal.deliveryDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `quantity` field in the `SubscriptionMeal` table.
  """
  quantity_max: Int @fdc_generated(from: "SubscriptionMeal.quantity", purpose: QUERY_MAX)
}
extend type SubscriptionType {
  """
  ✨ List `UserSubscription` objects in a one-to-many relationship (where `UserSubscription`.`subscriptionType` is this object).
  """
  userSubscriptions_on_subscriptionType(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSubscription_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSubscription_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserSubscription_Having
  ): [UserSubscription!]! @fdc_generated(from: "UserSubscription.subscriptionType", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "SubscriptionType", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `SubscriptionType` table.
  """
  _count: Int! @fdc_generated(from: "SubscriptionType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `basePrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  basePrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.basePrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `deliveryFrequency` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  deliveryFrequency_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.deliveryFrequency", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `mealsPerDelivery` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  mealsPerDelivery_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.mealsPerDelivery", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `SubscriptionType` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType.name", purpose: QUERY_COUNT)
  """
  ✨ Sum the `basePrice` field in the `SubscriptionType` table.
  """
  basePrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SubscriptionType.basePrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `mealsPerDelivery` field in the `SubscriptionType` table.
  """
  mealsPerDelivery_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "SubscriptionType.mealsPerDelivery", purpose: QUERY_SUM)
  """
  ✨ Average the `basePrice` field in the `SubscriptionType` table.
  """
  basePrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SubscriptionType.basePrice", purpose: QUERY_AVG)
  """
  ✨ Average the `mealsPerDelivery` field in the `SubscriptionType` table.
  """
  mealsPerDelivery_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "SubscriptionType.mealsPerDelivery", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `basePrice` field in the `SubscriptionType` table.
  """
  basePrice_min: Float @fdc_generated(from: "SubscriptionType.basePrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `SubscriptionType` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "SubscriptionType.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `mealsPerDelivery` field in the `SubscriptionType` table.
  """
  mealsPerDelivery_min: Int @fdc_generated(from: "SubscriptionType.mealsPerDelivery", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `basePrice` field in the `SubscriptionType` table.
  """
  basePrice_max: Float @fdc_generated(from: "SubscriptionType.basePrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `SubscriptionType` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "SubscriptionType.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `mealsPerDelivery` field in the `SubscriptionType` table.
  """
  mealsPerDelivery_max: Int @fdc_generated(from: "SubscriptionType.mealsPerDelivery", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `DeliveryAddress` objects in a one-to-many relationship (where `DeliveryAddress`.`user` is this object).
  """
  deliveryAddresses_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: DeliveryAddress_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [DeliveryAddress_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: DeliveryAddress_Having
  ): [DeliveryAddress!]! @fdc_generated(from: "DeliveryAddress.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `UserSubscription` objects in a one-to-many relationship (where `UserSubscription`.`user` is this object).
  """
  userSubscriptions_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSubscription_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSubscription_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserSubscription_Having
  ): [UserSubscription!]! @fdc_generated(from: "UserSubscription.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `preferredDeliveryNotes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  preferredDeliveryNotes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.preferredDeliveryNotes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `targetCalories` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  targetCalories_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.targetCalories", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `targetCarbs` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  targetCarbs_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.targetCarbs", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `targetFat` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  targetFat_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.targetFat", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `targetProtein` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  targetProtein_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.targetProtein", purpose: QUERY_COUNT)
  """
  ✨ Sum the `targetCalories` field in the `User` table.
  """
  targetCalories_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "User.targetCalories", purpose: QUERY_SUM)
  """
  ✨ Sum the `targetCarbs` field in the `User` table.
  """
  targetCarbs_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetCarbs", purpose: QUERY_SUM)
  """
  ✨ Sum the `targetFat` field in the `User` table.
  """
  targetFat_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetFat", purpose: QUERY_SUM)
  """
  ✨ Sum the `targetProtein` field in the `User` table.
  """
  targetProtein_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetProtein", purpose: QUERY_SUM)
  """
  ✨ Average the `targetCalories` field in the `User` table.
  """
  targetCalories_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetCalories", purpose: QUERY_AVG)
  """
  ✨ Average the `targetCarbs` field in the `User` table.
  """
  targetCarbs_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetCarbs", purpose: QUERY_AVG)
  """
  ✨ Average the `targetFat` field in the `User` table.
  """
  targetFat_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetFat", purpose: QUERY_AVG)
  """
  ✨ Average the `targetProtein` field in the `User` table.
  """
  targetProtein_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.targetProtein", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `targetCalories` field in the `User` table.
  """
  targetCalories_min: Int @fdc_generated(from: "User.targetCalories", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `targetCarbs` field in the `User` table.
  """
  targetCarbs_min: Float @fdc_generated(from: "User.targetCarbs", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `targetFat` field in the `User` table.
  """
  targetFat_min: Float @fdc_generated(from: "User.targetFat", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `targetProtein` field in the `User` table.
  """
  targetProtein_min: Float @fdc_generated(from: "User.targetProtein", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `targetCalories` field in the `User` table.
  """
  targetCalories_max: Int @fdc_generated(from: "User.targetCalories", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `targetCarbs` field in the `User` table.
  """
  targetCarbs_max: Float @fdc_generated(from: "User.targetCarbs", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `targetFat` field in the `User` table.
  """
  targetFat_max: Float @fdc_generated(from: "User.targetFat", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `targetProtein` field in the `User` table.
  """
  targetProtein_max: Float @fdc_generated(from: "User.targetProtein", purpose: QUERY_MAX)
}
extend type UserSubscription {
  """
  ✨ List `SubscriptionMeal` objects in a one-to-many relationship (where `SubscriptionMeal`.`userSubscription` is this object).
  """
  subscriptionMeals_on_userSubscription(
    """
    Filter condition to narrow down the query results.
    """
    where: SubscriptionMeal_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SubscriptionMeal_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SubscriptionMeal_Having
  ): [SubscriptionMeal!]! @fdc_generated(from: "SubscriptionMeal.userSubscription", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "UserSubscription", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `UserSubscription` table.
  """
  _count: Int! @fdc_generated(from: "UserSubscription", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `lastDeliveryDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastDeliveryDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.lastDeliveryDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `nextDeliveryDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  nextDeliveryDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.nextDeliveryDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `preferredDeliveryDay` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  preferredDeliveryDay_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.preferredDeliveryDay", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `preferredDeliveryTimeSlot` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  preferredDeliveryTimeSlot_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.preferredDeliveryTimeSlot", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `shippingAddressId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  shippingAddressId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.shippingAddressId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `startDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.startDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `subscriptionTypeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subscriptionTypeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.subscriptionTypeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `UserSubscription` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `UserSubscription` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "UserSubscription.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `UserSubscription` table.
  """
  endDate_min: Timestamp @fdc_generated(from: "UserSubscription.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `lastDeliveryDate` field in the `UserSubscription` table.
  """
  lastDeliveryDate_min: Timestamp @fdc_generated(from: "UserSubscription.lastDeliveryDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `nextDeliveryDate` field in the `UserSubscription` table.
  """
  nextDeliveryDate_min: Timestamp @fdc_generated(from: "UserSubscription.nextDeliveryDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startDate` field in the `UserSubscription` table.
  """
  startDate_min: Timestamp @fdc_generated(from: "UserSubscription.startDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `UserSubscription` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "UserSubscription.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `UserSubscription` table.
  """
  endDate_max: Timestamp @fdc_generated(from: "UserSubscription.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `lastDeliveryDate` field in the `UserSubscription` table.
  """
  lastDeliveryDate_max: Timestamp @fdc_generated(from: "UserSubscription.lastDeliveryDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `nextDeliveryDate` field in the `UserSubscription` table.
  """
  nextDeliveryDate_max: Timestamp @fdc_generated(from: "UserSubscription.nextDeliveryDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startDate` field in the `UserSubscription` table.
  """
  startDate_max: Timestamp @fdc_generated(from: "UserSubscription.startDate", purpose: QUERY_MAX)
}
