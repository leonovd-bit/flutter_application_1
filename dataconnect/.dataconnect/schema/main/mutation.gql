extend type Mutation {
  """
  ✨ Insert a single `DeliveryAddress` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  deliveryAddress_insert(
    """
    Data object to insert into the table.
    """
    data: DeliveryAddress_Data!
  ): DeliveryAddress_KeyOutput! @fdc_generated(from: "DeliveryAddress", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `DietaryTag` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  dietaryTag_insert(
    """
    Data object to insert into the table.
    """
    data: DietaryTag_Data!
  ): DietaryTag_KeyOutput! @fdc_generated(from: "DietaryTag", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Meal` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  meal_insert(
    """
    Data object to insert into the table.
    """
    data: Meal_Data!
  ): Meal_KeyOutput! @fdc_generated(from: "Meal", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `MealDietaryTag` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  mealDietaryTag_insert(
    """
    Data object to insert into the table.
    """
    data: MealDietaryTag_Data!
  ): MealDietaryTag_KeyOutput! @fdc_generated(from: "MealDietaryTag", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `SubscriptionMeal` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subscriptionMeal_insert(
    """
    Data object to insert into the table.
    """
    data: SubscriptionMeal_Data!
  ): SubscriptionMeal_KeyOutput! @fdc_generated(from: "SubscriptionMeal", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `SubscriptionType` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subscriptionType_insert(
    """
    Data object to insert into the table.
    """
    data: SubscriptionType_Data!
  ): SubscriptionType_KeyOutput! @fdc_generated(from: "SubscriptionType", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `UserSubscription` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  userSubscription_insert(
    """
    Data object to insert into the table.
    """
    data: UserSubscription_Data!
  ): UserSubscription_KeyOutput! @fdc_generated(from: "UserSubscription", purpose: INSERT_SINGLE)
  """
  ✨ Insert `DeliveryAddress` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  deliveryAddress_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [DeliveryAddress_Data!]!
  ): [DeliveryAddress_KeyOutput!]! @fdc_generated(from: "DeliveryAddress", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `DietaryTag` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  dietaryTag_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [DietaryTag_Data!]!
  ): [DietaryTag_KeyOutput!]! @fdc_generated(from: "DietaryTag", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Meal` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  meal_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Meal_Data!]!
  ): [Meal_KeyOutput!]! @fdc_generated(from: "Meal", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `MealDietaryTag` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  mealDietaryTag_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [MealDietaryTag_Data!]!
  ): [MealDietaryTag_KeyOutput!]! @fdc_generated(from: "MealDietaryTag", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `SubscriptionMeal` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subscriptionMeal_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [SubscriptionMeal_Data!]!
  ): [SubscriptionMeal_KeyOutput!]! @fdc_generated(from: "SubscriptionMeal", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `SubscriptionType` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  subscriptionType_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [SubscriptionType_Data!]!
  ): [SubscriptionType_KeyOutput!]! @fdc_generated(from: "SubscriptionType", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `UserSubscription` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  userSubscription_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [UserSubscription_Data!]!
  ): [UserSubscription_KeyOutput!]! @fdc_generated(from: "UserSubscription", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `DeliveryAddress` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `DeliveryAddress`.
  """
  deliveryAddress_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: DeliveryAddress_Data!
  ): DeliveryAddress_KeyOutput! @fdc_generated(from: "DeliveryAddress", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `DietaryTag` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `DietaryTag`.
  """
  dietaryTag_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: DietaryTag_Data!
  ): DietaryTag_KeyOutput! @fdc_generated(from: "DietaryTag", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Meal` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Meal`.
  """
  meal_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Meal_Data!
  ): Meal_KeyOutput! @fdc_generated(from: "Meal", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `MealDietaryTag` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MealDietaryTag`.
  """
  mealDietaryTag_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: MealDietaryTag_Data!
  ): MealDietaryTag_KeyOutput! @fdc_generated(from: "MealDietaryTag", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `SubscriptionMeal` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SubscriptionMeal`.
  """
  subscriptionMeal_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: SubscriptionMeal_Data!
  ): SubscriptionMeal_KeyOutput! @fdc_generated(from: "SubscriptionMeal", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `SubscriptionType` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SubscriptionType`.
  """
  subscriptionType_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: SubscriptionType_Data!
  ): SubscriptionType_KeyOutput! @fdc_generated(from: "SubscriptionType", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `UserSubscription` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `UserSubscription`.
  """
  userSubscription_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: UserSubscription_Data!
  ): UserSubscription_KeyOutput! @fdc_generated(from: "UserSubscription", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `DeliveryAddress` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `DeliveryAddress`.
  """
  deliveryAddress_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [DeliveryAddress_Data!]!
  ): [DeliveryAddress_KeyOutput!]! @fdc_generated(from: "DeliveryAddress", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `DietaryTag` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `DietaryTag`.
  """
  dietaryTag_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [DietaryTag_Data!]!
  ): [DietaryTag_KeyOutput!]! @fdc_generated(from: "DietaryTag", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Meal` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Meal`.
  """
  meal_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Meal_Data!]!
  ): [Meal_KeyOutput!]! @fdc_generated(from: "Meal", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `MealDietaryTag` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MealDietaryTag`.
  """
  mealDietaryTag_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [MealDietaryTag_Data!]!
  ): [MealDietaryTag_KeyOutput!]! @fdc_generated(from: "MealDietaryTag", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `SubscriptionMeal` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SubscriptionMeal`.
  """
  subscriptionMeal_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [SubscriptionMeal_Data!]!
  ): [SubscriptionMeal_KeyOutput!]! @fdc_generated(from: "SubscriptionMeal", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `SubscriptionType` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SubscriptionType`.
  """
  subscriptionType_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [SubscriptionType_Data!]!
  ): [SubscriptionType_KeyOutput!]! @fdc_generated(from: "SubscriptionType", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `UserSubscription` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `UserSubscription`.
  """
  userSubscription_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [UserSubscription_Data!]!
  ): [UserSubscription_KeyOutput!]! @fdc_generated(from: "UserSubscription", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `DeliveryAddress` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `DeliveryAddress` or `null` if not found.
  """
  deliveryAddress_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: DeliveryAddress_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: DeliveryAddress_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: DeliveryAddress_Data!
  ): DeliveryAddress_KeyOutput @fdc_generated(from: "DeliveryAddress", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `DietaryTag` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `DietaryTag` or `null` if not found.
  """
  dietaryTag_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: DietaryTag_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: DietaryTag_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: DietaryTag_Data!
  ): DietaryTag_KeyOutput @fdc_generated(from: "DietaryTag", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Meal` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Meal` or `null` if not found.
  """
  meal_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Meal_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Meal_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Meal_Data!
  ): Meal_KeyOutput @fdc_generated(from: "Meal", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `MealDietaryTag` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `MealDietaryTag` or `null` if not found.
  """
  mealDietaryTag_update(
    """
    The key used to identify the object.
    """
    key: MealDietaryTag_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MealDietaryTag_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: MealDietaryTag_Data!
  ): MealDietaryTag_KeyOutput @fdc_generated(from: "MealDietaryTag", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `SubscriptionMeal` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `SubscriptionMeal` or `null` if not found.
  """
  subscriptionMeal_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SubscriptionMeal_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SubscriptionMeal_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: SubscriptionMeal_Data!
  ): SubscriptionMeal_KeyOutput @fdc_generated(from: "SubscriptionMeal", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `SubscriptionType` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `SubscriptionType` or `null` if not found.
  """
  subscriptionType_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SubscriptionType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SubscriptionType_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: SubscriptionType_Data!
  ): SubscriptionType_KeyOutput @fdc_generated(from: "SubscriptionType", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `UserSubscription` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `UserSubscription` or `null` if not found.
  """
  userSubscription_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: UserSubscription_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserSubscription_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: UserSubscription_Data!
  ): UserSubscription_KeyOutput @fdc_generated(from: "UserSubscription", purpose: UPDATE_SINGLE)
  """
  ✨ Update `DeliveryAddress` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  deliveryAddress_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: DeliveryAddress_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: DeliveryAddress_Data!
  ): Int! @fdc_generated(from: "DeliveryAddress", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `DietaryTag` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  dietaryTag_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: DietaryTag_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: DietaryTag_Data!
  ): Int! @fdc_generated(from: "DietaryTag", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Meal` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  meal_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Meal_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Meal_Data!
  ): Int! @fdc_generated(from: "Meal", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `MealDietaryTag` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  mealDietaryTag_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: MealDietaryTag_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: MealDietaryTag_Data!
  ): Int! @fdc_generated(from: "MealDietaryTag", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `SubscriptionMeal` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  subscriptionMeal_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: SubscriptionMeal_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: SubscriptionMeal_Data!
  ): Int! @fdc_generated(from: "SubscriptionMeal", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `SubscriptionType` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  subscriptionType_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: SubscriptionType_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: SubscriptionType_Data!
  ): Int! @fdc_generated(from: "SubscriptionType", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `UserSubscription` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  userSubscription_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: UserSubscription_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: UserSubscription_Data!
  ): Int! @fdc_generated(from: "UserSubscription", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `DeliveryAddress` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  deliveryAddress_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: DeliveryAddress_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: DeliveryAddress_FirstRow
  ): DeliveryAddress_KeyOutput @fdc_generated(from: "DeliveryAddress", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `DietaryTag` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  dietaryTag_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: DietaryTag_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: DietaryTag_FirstRow
  ): DietaryTag_KeyOutput @fdc_generated(from: "DietaryTag", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Meal` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  meal_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Meal_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Meal_FirstRow
  ): Meal_KeyOutput @fdc_generated(from: "Meal", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `MealDietaryTag` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  mealDietaryTag_delete(
    """
    The key used to identify the object.
    """
    key: MealDietaryTag_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MealDietaryTag_FirstRow
  ): MealDietaryTag_KeyOutput @fdc_generated(from: "MealDietaryTag", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `SubscriptionMeal` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  subscriptionMeal_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SubscriptionMeal_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SubscriptionMeal_FirstRow
  ): SubscriptionMeal_KeyOutput @fdc_generated(from: "SubscriptionMeal", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `SubscriptionType` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  subscriptionType_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SubscriptionType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SubscriptionType_FirstRow
  ): SubscriptionType_KeyOutput @fdc_generated(from: "SubscriptionType", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `UserSubscription` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  userSubscription_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: UserSubscription_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserSubscription_FirstRow
  ): UserSubscription_KeyOutput @fdc_generated(from: "UserSubscription", purpose: DELETE_SINGLE)
  """
  ✨ Delete `DeliveryAddress` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  deliveryAddress_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: DeliveryAddress_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "DeliveryAddress", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `DietaryTag` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  dietaryTag_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: DietaryTag_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "DietaryTag", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Meal` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  meal_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Meal_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Meal", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `MealDietaryTag` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  mealDietaryTag_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: MealDietaryTag_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "MealDietaryTag", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `SubscriptionMeal` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  subscriptionMeal_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: SubscriptionMeal_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionMeal", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `SubscriptionType` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  subscriptionType_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: SubscriptionType_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "SubscriptionType", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `UserSubscription` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  userSubscription_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: UserSubscription_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "UserSubscription", purpose: DELETE_MULTIPLE)
}
